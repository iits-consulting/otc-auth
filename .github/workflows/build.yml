name: Build
on:
  pull_request:
  push:
    branches-ignore:
      - main

jobs:
  lint:
    name: Lint the otc-auth source code
    runs-on: ubuntu-24.04
    steps:
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ^1.20
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build the otc-auth
    runs-on: ubuntu-24.04
    steps:
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ^1.20
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
      - name: Test
        run: |
          go test -coverprofile=coverage.out -v ./...
          COVERAGE_REPORT=$(go tool cover -func=coverage.out 2>/dev/null || echo "No coverage data")
          COVERAGE=$(echo "$COVERAGE_REPORT" | grep -oP 'total:\s*\K[0-9.]+%' || echo "0%")
          echo "COVERAGE_REPORT<<EOF" >> $GITHUB_ENV
          echo "$COVERAGE_REPORT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
      - name: Format Coverage Report
        run: |
          # Initialize variables
          current_pkg=""
          current_file=""

          # Start building the report
          REPORT="**Total Coverage:** $COVERAGE\n\n"

          # Process each line of the coverage report
          while IFS= read -r line; do
            # Skip empty lines and the total line (we already have it)
            [[ -z "$line" || "$line" == total:* ]] && continue

            # Parse the line into components
            filepath=$(echo "$line" | awk '{print $1}')
            func=$(echo "$line" | awk '{print $2}')
            cov=$(echo "$line" | awk '{print $3}')

            # Extract package and filename
            pkg=$(echo "$filepath" | cut -d'/' -f2)
            filename=$(echo "$filepath" | cut -d':' -f1 | xargs basename)

            # Determine coverage emoji
            cov_value=$(echo "$cov" | tr -d '%')
            if (( $(echo "$cov_value == 0" | bc -l) )); then
              emoji="âšª"
            elif (( $(echo "$cov_value < 50" | bc -l) )); then
              emoji="ðŸ”´"
            elif (( $(echo "$cov_value < 80" | bc -l) )); then
              emoji="ðŸŸ¡"
            else
              emoji="ðŸŸ¢"
            fi

            # Add package section if changed
            if [[ "$pkg" != "$current_pkg" ]]; then
              [[ -n "$current_pkg" ]] && REPORT+="</details>\n"
              REPORT+="<details>\n<summary><b>ðŸ“¦ $pkg</b></summary>\n"
              current_pkg="$pkg"
              current_file=""
            fi

            # Add file section if changed
            if [[ "$filename" != "$current_file" ]]; then
              [[ -n "$current_file" ]] && REPORT+="</details>\n"
              REPORT+="<details>\n<summary>ðŸ“„ $filename</summary>\n"
              current_file="$filename"
            fi

            # Add function line
            REPORT+="$emoji $func: $cov\n"
          done <<< "$COVERAGE_REPORT"

          # Close any open sections
          [[ -n "$current_file" ]] && REPORT+="</details>\n"
          [[ -n "$current_pkg" ]] && REPORT+="</details>\n"

          # Store in environment variable
          echo "FORMATTED_COVERAGE<<EOF" >> $GITHUB_ENV
          echo -e "$REPORT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create or update coverage comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ðŸ“Š Code Coverage Report
            ${{ env.REPORT }}
          edit-mode: replace
      - name: Build
        run: go build -v -o otc-auth .
      - name: Upload the built binary executable for testing
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: otc-auth
