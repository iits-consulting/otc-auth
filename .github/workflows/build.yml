name: Build
on:
  pull_request:
  push:
    branches-ignore:
      - main

jobs:
  lint:
    name: Lint the otc-auth source code
    runs-on: ubuntu-24.04
    steps:
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ^1.20
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build the otc-auth
    runs-on: ubuntu-24.04
    steps:
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ^1.20
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
      - name: Test
        run: |
          go test -coverprofile=coverage.out -v ./...
          COVERAGE_REPORT=$(go tool cover -func=coverage.out 2>/dev/null || echo "No coverage data")
          COVERAGE=$(echo "$COVERAGE_REPORT" | grep -oP 'total:\s*\K[0-9.]+%' || echo "0%")
          echo "COVERAGE_REPORT<<EOF" >> $GITHUB_ENV
          echo "$COVERAGE_REPORT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
      - name: Format Coverage Report
        run: |
          # Process coverage report into hierarchical markdown
          FORMATTED_REPORT=$(echo "$COVERAGE_REPORT" | awk '
          BEGIN {
            print "## ðŸ“Š Code Coverage Report"
            print "**Total Coverage:** '"$COVERAGE"'"
            print ""
            current_pkg = ""
            current_file = ""
          }
          /^[^[:space:]]+/ {
            # Parse line
            split($1, parts, ":")
            pkg_path = parts[1]
            file = parts[2]
            func = $2
            cov = $3

            # Extract package name
            split(pkg_path, pkg_parts, "/")
            pkg = pkg_parts[2]  # otc-auth/[pkg]/...

            # Determine coverage emoji
            cov_value = cov
            gsub(/%/, "", cov_value)
            if (cov_value == 0) emoji = "âšª"
            else if (cov_value < 50) emoji = "ðŸ”´"
            else if (cov_value < 80) emoji = "ðŸŸ¡"
            else emoji = "ðŸŸ¢"

            # Package level
            if (pkg != current_pkg) {
              if (current_pkg != "") print "</details>"
              print "<details>"
              print "<summary><b>ðŸ“¦ " pkg "</b></summary>"
              current_pkg = pkg
              current_file = ""
            }

            # File level
            if (file != current_file) {
              if (current_file != "") print "</details>"
              print "<details>"
              print "<summary>ðŸ“„ " file "</summary>"
              current_file = file
            }

            # Function level
            print emoji " " func ": " cov
          }
          END {
            if (current_file != "") print "</details>"
            if (current_pkg != "") print "</details>"
          }
          ')

          # Store in environment variable
          echo "FORMATTED_COVERAGE<<EOF" >> $GITHUB_ENV
          echo "$FORMATTED_REPORT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create or update coverage comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ env.FORMATTED_REPORT }}
          edit-mode: replace
      - name: Build
        run: go build -v -o otc-auth .
      - name: Upload the built binary executable for testing
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: otc-auth
